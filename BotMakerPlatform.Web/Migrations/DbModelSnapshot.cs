// <auto-generated />
using BotMakerPlatform.Web.Repo;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BotMakerPlatform.Web.Migrations
{
    [DbContext(typeof(Db))]
    partial class DbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BotMakerPlatform.Web.Areas.StoreBot.Record.ImageFileRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageFileId");

                    b.Property<int>("StoreProductRecordId");

                    b.HasKey("Id");

                    b.HasIndex("StoreProductRecordId");

                    b.ToTable("ImageFileRecords");
                });

            modelBuilder.Entity("BotMakerPlatform.Web.Areas.StoreBot.Record.StoreProductRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BotInstanceRecordId");

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int>("Price");

                    b.HasKey("Id");

                    b.HasIndex("BotInstanceRecordId");

                    b.ToTable("StoreProductRecords");
                });

            modelBuilder.Entity("BotMakerPlatform.Web.Areas.StoreBot.Repo.StoreAdminRecord", b =>
                {
                    b.Property<int>("BotInstanceRecordId");

                    b.Property<long>("ChatId");

                    b.HasKey("BotInstanceRecordId", "ChatId");

                    b.ToTable("StoreAdminRecords");
                });

            modelBuilder.Entity("BotMakerPlatform.Web.Repo.BotInstanceRecord", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("BotUniqueName");

                    b.Property<string>("BotUsername");

                    b.Property<string>("Token");

                    b.Property<string>("UserId");

                    b.Property<string>("WebhookSecret");

                    b.HasKey("Id");

                    b.ToTable("BotInstanceRecords");
                });

            modelBuilder.Entity("BotMakerPlatform.Web.Repo.SettingRecord", b =>
                {
                    b.Property<int>("BotInstanceRecordId");

                    b.Property<int>("BotInstanceRecordId1");

                    b.Property<string>("Value");

                    b.HasKey("BotInstanceRecordId");

                    b.HasIndex("BotInstanceRecordId1");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("BotMakerPlatform.Web.Repo.SubscriberRecord", b =>
                {
                    b.Property<int>("BotInstanceRecordId");

                    b.Property<long>("ChatId");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Username");

                    b.HasKey("BotInstanceRecordId", "ChatId");

                    b.ToTable("Subscribers");
                });

            modelBuilder.Entity("BotMakerPlatform.Web.Areas.StoreBot.Record.ImageFileRecord", b =>
                {
                    b.HasOne("BotMakerPlatform.Web.Areas.StoreBot.Record.StoreProductRecord", "StoreProductRecord")
                        .WithMany("ImageFileRecords")
                        .HasForeignKey("StoreProductRecordId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BotMakerPlatform.Web.Areas.StoreBot.Record.StoreProductRecord", b =>
                {
                    b.HasOne("BotMakerPlatform.Web.Repo.BotInstanceRecord", "BotInstanceRecord")
                        .WithMany()
                        .HasForeignKey("BotInstanceRecordId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BotMakerPlatform.Web.Areas.StoreBot.Repo.StoreAdminRecord", b =>
                {
                    b.HasOne("BotMakerPlatform.Web.Repo.BotInstanceRecord", "BotInstanceRecord")
                        .WithMany()
                        .HasForeignKey("BotInstanceRecordId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BotMakerPlatform.Web.Repo.SettingRecord", b =>
                {
                    b.HasOne("BotMakerPlatform.Web.Repo.BotInstanceRecord", "BotInstanceRecord")
                        .WithMany()
                        .HasForeignKey("BotInstanceRecordId1")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BotMakerPlatform.Web.Repo.SubscriberRecord", b =>
                {
                    b.HasOne("BotMakerPlatform.Web.Repo.BotInstanceRecord", "BotInstanceRecord")
                        .WithMany("SubscriberRecords")
                        .HasForeignKey("BotInstanceRecordId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
